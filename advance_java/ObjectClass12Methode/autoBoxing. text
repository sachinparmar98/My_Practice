[Java] Auto Boxing & Auto Unboxing


Java has a basic type and a Wrapper class.


Default type: int, long, float, double, boolean, etc.
Wrapper Class: Integer, Long, Float, Double, Boolean etc.


Let's take a look at the concept of boxing and unboxing.


Boxing: Creating a Wrapper class that corresponds to the default type data


Unboxing: Convert from Wrapper class to default type


// Boxing
int i = 10;
Integer num = new Integer(i);


/ Unboxing
Integer num = new Integer(10);
int i = num.intValue();








Auto Boxing & Auto Unboxing
Starting with JDK 1.5, the Java compiler automatically processes cases requiring boxing and unboxing.


/ Auto Boxing
int i = 10;
Integer num = i;


// Auto Unboxing
Integer num = new Integer(10);
int i = num;


성능
For convenience, auto-boxing and unboxing are available, but additional operations are carried out internally.


Therefore, let us implement the same type of operation so that auto-boxing and unboxing do not occur.


Auto Boxing Operation
public static void main(String[] args) {
long t = System.currentTimeMillis();
Long sum = 0L;
for (long i = 0; i < 1000000; i++) {
sum += i;
}
System.out.println("Run Time: " + (System.currentTimeMillis() - t) + "ms");
}


/ Runtime: 19 ms
Operations of the same type
public static void main(String[] args) {
long t = System.currentTimeMillis();
long sum = 0L;
for (long i = 0; i < 1000000; i++) {
sum += i;
}
System.out.println("Run Time: " + (System.currentTimeMillis() - t) + " ms") ;
}


/ / Runtime: 4 ms


It's about five times the difference in performance on the basis of a million units. So let's have the habit of checking for unnecessary auto-casting as we develop our services.






